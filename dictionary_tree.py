# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _dictionary_tree
else:
    import _dictionary_tree

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dictionary_tree.delete_SwigPyIterator

    def value(self):
        return _dictionary_tree.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _dictionary_tree.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _dictionary_tree.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _dictionary_tree.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _dictionary_tree.SwigPyIterator_equal(self, x)

    def copy(self):
        return _dictionary_tree.SwigPyIterator_copy(self)

    def next(self):
        return _dictionary_tree.SwigPyIterator_next(self)

    def __next__(self):
        return _dictionary_tree.SwigPyIterator___next__(self)

    def previous(self):
        return _dictionary_tree.SwigPyIterator_previous(self)

    def advance(self, n):
        return _dictionary_tree.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _dictionary_tree.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _dictionary_tree.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _dictionary_tree.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _dictionary_tree.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _dictionary_tree.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _dictionary_tree.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _dictionary_tree:
_dictionary_tree.SwigPyIterator_swigregister(SwigPyIterator)

class VecChar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dictionary_tree.VecChar_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dictionary_tree.VecChar___nonzero__(self)

    def __bool__(self):
        return _dictionary_tree.VecChar___bool__(self)

    def __len__(self):
        return _dictionary_tree.VecChar___len__(self)

    def __getslice__(self, i, j):
        return _dictionary_tree.VecChar___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dictionary_tree.VecChar___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dictionary_tree.VecChar___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dictionary_tree.VecChar___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dictionary_tree.VecChar___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dictionary_tree.VecChar___setitem__(self, *args)

    def pop(self):
        return _dictionary_tree.VecChar_pop(self)

    def append(self, x):
        return _dictionary_tree.VecChar_append(self, x)

    def empty(self):
        return _dictionary_tree.VecChar_empty(self)

    def size(self):
        return _dictionary_tree.VecChar_size(self)

    def swap(self, v):
        return _dictionary_tree.VecChar_swap(self, v)

    def begin(self):
        return _dictionary_tree.VecChar_begin(self)

    def end(self):
        return _dictionary_tree.VecChar_end(self)

    def rbegin(self):
        return _dictionary_tree.VecChar_rbegin(self)

    def rend(self):
        return _dictionary_tree.VecChar_rend(self)

    def clear(self):
        return _dictionary_tree.VecChar_clear(self)

    def get_allocator(self):
        return _dictionary_tree.VecChar_get_allocator(self)

    def pop_back(self):
        return _dictionary_tree.VecChar_pop_back(self)

    def erase(self, *args):
        return _dictionary_tree.VecChar_erase(self, *args)

    def __init__(self, *args):
        _dictionary_tree.VecChar_swiginit(self, _dictionary_tree.new_VecChar(*args))

    def push_back(self, x):
        return _dictionary_tree.VecChar_push_back(self, x)

    def front(self):
        return _dictionary_tree.VecChar_front(self)

    def back(self):
        return _dictionary_tree.VecChar_back(self)

    def assign(self, n, x):
        return _dictionary_tree.VecChar_assign(self, n, x)

    def resize(self, *args):
        return _dictionary_tree.VecChar_resize(self, *args)

    def insert(self, *args):
        return _dictionary_tree.VecChar_insert(self, *args)

    def reserve(self, n):
        return _dictionary_tree.VecChar_reserve(self, n)

    def capacity(self):
        return _dictionary_tree.VecChar_capacity(self)
    __swig_destroy__ = _dictionary_tree.delete_VecChar

# Register VecChar in _dictionary_tree:
_dictionary_tree.VecChar_swigregister(VecChar)

class VecVecChar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dictionary_tree.VecVecChar_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dictionary_tree.VecVecChar___nonzero__(self)

    def __bool__(self):
        return _dictionary_tree.VecVecChar___bool__(self)

    def __len__(self):
        return _dictionary_tree.VecVecChar___len__(self)

    def __getslice__(self, i, j):
        return _dictionary_tree.VecVecChar___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dictionary_tree.VecVecChar___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dictionary_tree.VecVecChar___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dictionary_tree.VecVecChar___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dictionary_tree.VecVecChar___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dictionary_tree.VecVecChar___setitem__(self, *args)

    def pop(self):
        return _dictionary_tree.VecVecChar_pop(self)

    def append(self, x):
        return _dictionary_tree.VecVecChar_append(self, x)

    def empty(self):
        return _dictionary_tree.VecVecChar_empty(self)

    def size(self):
        return _dictionary_tree.VecVecChar_size(self)

    def swap(self, v):
        return _dictionary_tree.VecVecChar_swap(self, v)

    def begin(self):
        return _dictionary_tree.VecVecChar_begin(self)

    def end(self):
        return _dictionary_tree.VecVecChar_end(self)

    def rbegin(self):
        return _dictionary_tree.VecVecChar_rbegin(self)

    def rend(self):
        return _dictionary_tree.VecVecChar_rend(self)

    def clear(self):
        return _dictionary_tree.VecVecChar_clear(self)

    def get_allocator(self):
        return _dictionary_tree.VecVecChar_get_allocator(self)

    def pop_back(self):
        return _dictionary_tree.VecVecChar_pop_back(self)

    def erase(self, *args):
        return _dictionary_tree.VecVecChar_erase(self, *args)

    def __init__(self, *args):
        _dictionary_tree.VecVecChar_swiginit(self, _dictionary_tree.new_VecVecChar(*args))

    def push_back(self, x):
        return _dictionary_tree.VecVecChar_push_back(self, x)

    def front(self):
        return _dictionary_tree.VecVecChar_front(self)

    def back(self):
        return _dictionary_tree.VecVecChar_back(self)

    def assign(self, n, x):
        return _dictionary_tree.VecVecChar_assign(self, n, x)

    def resize(self, *args):
        return _dictionary_tree.VecVecChar_resize(self, *args)

    def insert(self, *args):
        return _dictionary_tree.VecVecChar_insert(self, *args)

    def reserve(self, n):
        return _dictionary_tree.VecVecChar_reserve(self, n)

    def capacity(self):
        return _dictionary_tree.VecVecChar_capacity(self)
    __swig_destroy__ = _dictionary_tree.delete_VecVecChar

# Register VecVecChar in _dictionary_tree:
_dictionary_tree.VecVecChar_swigregister(VecVecChar)

class VecString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dictionary_tree.VecString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dictionary_tree.VecString___nonzero__(self)

    def __bool__(self):
        return _dictionary_tree.VecString___bool__(self)

    def __len__(self):
        return _dictionary_tree.VecString___len__(self)

    def __getslice__(self, i, j):
        return _dictionary_tree.VecString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dictionary_tree.VecString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dictionary_tree.VecString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dictionary_tree.VecString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dictionary_tree.VecString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dictionary_tree.VecString___setitem__(self, *args)

    def pop(self):
        return _dictionary_tree.VecString_pop(self)

    def append(self, x):
        return _dictionary_tree.VecString_append(self, x)

    def empty(self):
        return _dictionary_tree.VecString_empty(self)

    def size(self):
        return _dictionary_tree.VecString_size(self)

    def swap(self, v):
        return _dictionary_tree.VecString_swap(self, v)

    def begin(self):
        return _dictionary_tree.VecString_begin(self)

    def end(self):
        return _dictionary_tree.VecString_end(self)

    def rbegin(self):
        return _dictionary_tree.VecString_rbegin(self)

    def rend(self):
        return _dictionary_tree.VecString_rend(self)

    def clear(self):
        return _dictionary_tree.VecString_clear(self)

    def get_allocator(self):
        return _dictionary_tree.VecString_get_allocator(self)

    def pop_back(self):
        return _dictionary_tree.VecString_pop_back(self)

    def erase(self, *args):
        return _dictionary_tree.VecString_erase(self, *args)

    def __init__(self, *args):
        _dictionary_tree.VecString_swiginit(self, _dictionary_tree.new_VecString(*args))

    def push_back(self, x):
        return _dictionary_tree.VecString_push_back(self, x)

    def front(self):
        return _dictionary_tree.VecString_front(self)

    def back(self):
        return _dictionary_tree.VecString_back(self)

    def assign(self, n, x):
        return _dictionary_tree.VecString_assign(self, n, x)

    def resize(self, *args):
        return _dictionary_tree.VecString_resize(self, *args)

    def insert(self, *args):
        return _dictionary_tree.VecString_insert(self, *args)

    def reserve(self, n):
        return _dictionary_tree.VecString_reserve(self, n)

    def capacity(self):
        return _dictionary_tree.VecString_capacity(self)
    __swig_destroy__ = _dictionary_tree.delete_VecString

# Register VecString in _dictionary_tree:
_dictionary_tree.VecString_swigregister(VecString)

class CharacterNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ch = property(_dictionary_tree.CharacterNode_ch_get, _dictionary_tree.CharacterNode_ch_set)
    isWord = property(_dictionary_tree.CharacterNode_isWord_get, _dictionary_tree.CharacterNode_isWord_set)
    children = property(_dictionary_tree.CharacterNode_children_get, _dictionary_tree.CharacterNode_children_set)

    def __init__(self, ch, isWord):
        _dictionary_tree.CharacterNode_swiginit(self, _dictionary_tree.new_CharacterNode(ch, isWord))

    def find(self, ch):
        return _dictionary_tree.CharacterNode_find(self, ch)
    __swig_destroy__ = _dictionary_tree.delete_CharacterNode

# Register CharacterNode in _dictionary_tree:
_dictionary_tree.CharacterNode_swigregister(CharacterNode)

class DictionaryTree(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def find(self, arg2):
        return _dictionary_tree.DictionaryTree_find(self, arg2)

    def insert(self, arg2):
        return _dictionary_tree.DictionaryTree_insert(self, arg2)

    def getNodeCnt(self):
        return _dictionary_tree.DictionaryTree_getNodeCnt(self)

    def __init__(self):
        _dictionary_tree.DictionaryTree_swiginit(self, _dictionary_tree.new_DictionaryTree())
    __swig_destroy__ = _dictionary_tree.delete_DictionaryTree

# Register DictionaryTree in _dictionary_tree:
_dictionary_tree.DictionaryTree_swigregister(DictionaryTree)

class WordSolver(DictionaryTree):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def solve(self, arg2):
        return _dictionary_tree.WordSolver_solve(self, arg2)

    def __init__(self):
        _dictionary_tree.WordSolver_swiginit(self, _dictionary_tree.new_WordSolver())
    __swig_destroy__ = _dictionary_tree.delete_WordSolver

# Register WordSolver in _dictionary_tree:
_dictionary_tree.WordSolver_swigregister(WordSolver)



